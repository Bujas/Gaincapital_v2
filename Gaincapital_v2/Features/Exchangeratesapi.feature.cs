// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Gaincapital_v2.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Exchangeratesapi")]
    public partial class ExchangeratesapiFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Exchangeratesapi.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Exchangeratesapi", " This test was created for Gaincapital recruitment process", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I don\'t have response status codes error")]
        [NUnit.Framework.CategoryAttribute("Check")]
        [NUnit.Framework.TestCaseAttribute("401", null)]
        [NUnit.Framework.TestCaseAttribute("402", null)]
        [NUnit.Framework.TestCaseAttribute("403", null)]
        [NUnit.Framework.TestCaseAttribute("404", null)]
        [NUnit.Framework.TestCaseAttribute("405", null)]
        [NUnit.Framework.TestCaseAttribute("406", null)]
        [NUnit.Framework.TestCaseAttribute("407", null)]
        [NUnit.Framework.TestCaseAttribute("408", null)]
        [NUnit.Framework.TestCaseAttribute("409", null)]
        [NUnit.Framework.TestCaseAttribute("410", null)]
        [NUnit.Framework.TestCaseAttribute("500", null)]
        [NUnit.Framework.TestCaseAttribute("501", null)]
        [NUnit.Framework.TestCaseAttribute("502", null)]
        [NUnit.Framework.TestCaseAttribute("503", null)]
        [NUnit.Framework.TestCaseAttribute("504", null)]
        [NUnit.Framework.TestCaseAttribute("505", null)]
        public virtual void IDontHaveResponseStatusCodesError(string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Check"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I don\'t have response status codes error", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I have an endpoint https://api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("I try get all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("I don\'t have error status {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I have 200 response status code")]
        public virtual void IHave200ResponseStatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I have 200 response status code", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("I have an endpoint https://api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When("I try get all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("I have 200 status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I don\'t have null")]
        public virtual void IDontHaveNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I don\'t have null", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("I have an endpoint https://api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When("I try get all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("I don\'t have null object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Value from currency is bigger than 0")]
        [NUnit.Framework.TestCaseAttribute("CAD", null)]
        [NUnit.Framework.TestCaseAttribute("HKD", null)]
        [NUnit.Framework.TestCaseAttribute("ISK", null)]
        [NUnit.Framework.TestCaseAttribute("PHP", null)]
        [NUnit.Framework.TestCaseAttribute("DKK", null)]
        [NUnit.Framework.TestCaseAttribute("HUF", null)]
        [NUnit.Framework.TestCaseAttribute("CZK", null)]
        [NUnit.Framework.TestCaseAttribute("AUD", null)]
        [NUnit.Framework.TestCaseAttribute("RON", null)]
        [NUnit.Framework.TestCaseAttribute("SEK", null)]
        [NUnit.Framework.TestCaseAttribute("IDR", null)]
        [NUnit.Framework.TestCaseAttribute("INR", null)]
        [NUnit.Framework.TestCaseAttribute("BRL", null)]
        [NUnit.Framework.TestCaseAttribute("RUB", null)]
        [NUnit.Framework.TestCaseAttribute("HRK", null)]
        [NUnit.Framework.TestCaseAttribute("JPY", null)]
        [NUnit.Framework.TestCaseAttribute("THB", null)]
        [NUnit.Framework.TestCaseAttribute("CHF", null)]
        [NUnit.Framework.TestCaseAttribute("SGD", null)]
        [NUnit.Framework.TestCaseAttribute("PLN", null)]
        [NUnit.Framework.TestCaseAttribute("BGN", null)]
        [NUnit.Framework.TestCaseAttribute("TRY", null)]
        [NUnit.Framework.TestCaseAttribute("CNY", null)]
        [NUnit.Framework.TestCaseAttribute("NOK", null)]
        [NUnit.Framework.TestCaseAttribute("NZD", null)]
        [NUnit.Framework.TestCaseAttribute("ZAR", null)]
        [NUnit.Framework.TestCaseAttribute("USD", null)]
        [NUnit.Framework.TestCaseAttribute("MXN", null)]
        [NUnit.Framework.TestCaseAttribute("ILS", null)]
        [NUnit.Framework.TestCaseAttribute("GBP", null)]
        [NUnit.Framework.TestCaseAttribute("KRW", null)]
        [NUnit.Framework.TestCaseAttribute("MYR", null)]
        public virtual void ValueFromCurrencyIsBiggerThan0(string currency, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Value from currency is bigger than 0", null, exampleTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("I have an endpoint https://api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("I try get all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("Value from {0} is bigger than zero", currency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Value from currency is bigger than zero")]
        [NUnit.Framework.TestCaseAttribute("CAD", null)]
        [NUnit.Framework.TestCaseAttribute("HKD", null)]
        [NUnit.Framework.TestCaseAttribute("ISK", null)]
        [NUnit.Framework.TestCaseAttribute("PHP", null)]
        [NUnit.Framework.TestCaseAttribute("DKK", null)]
        [NUnit.Framework.TestCaseAttribute("HUF", null)]
        [NUnit.Framework.TestCaseAttribute("CZK", null)]
        [NUnit.Framework.TestCaseAttribute("AUD", null)]
        [NUnit.Framework.TestCaseAttribute("RON", null)]
        [NUnit.Framework.TestCaseAttribute("SEK", null)]
        [NUnit.Framework.TestCaseAttribute("IDR", null)]
        [NUnit.Framework.TestCaseAttribute("INR", null)]
        [NUnit.Framework.TestCaseAttribute("BRL", null)]
        [NUnit.Framework.TestCaseAttribute("RUB", null)]
        [NUnit.Framework.TestCaseAttribute("HRK", null)]
        [NUnit.Framework.TestCaseAttribute("JPY", null)]
        [NUnit.Framework.TestCaseAttribute("THB", null)]
        [NUnit.Framework.TestCaseAttribute("CHF", null)]
        [NUnit.Framework.TestCaseAttribute("SGD", null)]
        [NUnit.Framework.TestCaseAttribute("PLN", null)]
        [NUnit.Framework.TestCaseAttribute("BGN", null)]
        [NUnit.Framework.TestCaseAttribute("TRY", null)]
        [NUnit.Framework.TestCaseAttribute("CNY", null)]
        [NUnit.Framework.TestCaseAttribute("NOK", null)]
        [NUnit.Framework.TestCaseAttribute("NZD", null)]
        [NUnit.Framework.TestCaseAttribute("ZAR", null)]
        [NUnit.Framework.TestCaseAttribute("USD", null)]
        [NUnit.Framework.TestCaseAttribute("MXN", null)]
        [NUnit.Framework.TestCaseAttribute("ILS", null)]
        [NUnit.Framework.TestCaseAttribute("GBP", null)]
        [NUnit.Framework.TestCaseAttribute("KRW", null)]
        [NUnit.Framework.TestCaseAttribute("MYR", null)]
        public virtual void ValueFromCurrencyIsBiggerThanZero(string currency, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Value from currency is bigger than zero", null, exampleTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.Given("I have an endpoint https://api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.When("I try get all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then(string.Format("Value from {0} is bigger than zero", currency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
